/*
 * A dumb game for Gamebuino Meta
 *by Jean-Baptiste Chaffange Koch - 2018
 *under license "je m'en bat les steaks" aka CC3.0
 *ah et merci à Aurelien Rodot pour la partie des highscore et la "physique" de la balle
 *parceque grosso modo, j'ai copié/collé son boulot sur UFO-Race (https://github.com/Rodot/UFO-Race-META)
 *quand ça marche très bien, pourquoi réinventer la roue !
 *
 *DTC is meaning "Dans ta couleur" in french, nothing else, absolutly NOTHING ELSE ...
 *
 */


#include <Gamebuino-Meta.h>
#define NUM_HIGHSCORE 5
#define NAMELENGTH 12

struct Point {
  float x;
  float y;
};

struct Rect {
  int x;
  int y;
  int w;
  int h;
};

struct Speed {
  float dx;
  float dy;
};

struct Ball {
  Point point;
  Speed spd;
  int r;
  byte color;
};

struct Ball ball;
#define LEFT 1
#define RIGHT 0
int NUM_PADS = 6;// nb of pads - 3 on each side
int pads[8];  //to store colors of pads
int base_w = 6; //w of pads in pixels
int base_h = 19; //h of pads in pixels
int Xpads[8];
int Ypads[8];
int dx_max;    // dx max, 10 to 14
int y_min = 0;        // for rebound down the screen
int dtc = 0;        //choosed game color
int bird_color = 8; //random bird color in training mode
int current_score = 0;
boolean high_score = false;
int NUM_COLORS = 6;
int colors[6] = {10,13,8,3,7,0};   //cf. palette index, more difficulty, more colors !
//10 YELLOW   13 BLUE   8 RED   3 GREEN   7 WHITE   0 BLACK
int  nColors = 3; //var to limit nb of colors used, change in fct of time
byte difficulty = 1;  //normal or hard
boolean training = false;  //training or normal
boolean game_running = false; //true when in game, else menu
int menu_color = 0;
#define NORMAL 1
#define HARD 2
float fps = 0.04;   //time per frame
int frame;
int currentTime = 0;
int realTime = 0; //calculated real time
int limitTime = 235;   //in frame, not in seconds ;) time limit per color
boolean benchmark = false;

const uint8_t img_bird_yellow_RData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xaa,0xa0, 0x77,0x0e, 0xee,0xee, 0xe0,0xaa, 0xaa,0x07, 0x77,0x70, 0xee,0xee, 0x0a,0xaa, 0xaa,0x07, 0x77,0x07, 0x0e,0xe0, 0x00,0x0a, 0xaa,0x07, 0x77,0x07, 0x0e,0x0a, 0xaa,0xa0, 0xaa,0xa0, 0x77,0x77, 0x0e,0x0a, 0xaa,0xaa, 0x0a,0xaa, 0x00,0x00, 0x0e,0x0a, 0xaa,0xaa, 0xa0,0xa0, 0x99,0x99, 0x90,0x0a, 0xaa,0xaa, 0xa0,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x04,0x40, 0x99,0x99, 0x0e,0xee, 0x04,0x44, 0x44,0x44, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xaa,0xa0, 0x77,0x0e, 0xee,0xee, 0xe0,0xaa, 0xaa,0x07, 0x77,0x70, 0xee,0xee, 0x0a,0xaa, 0xaa,0x07, 0x77,0x07, 0x0e,0xee, 0x0a,0xaa, 0xaa,0x07, 0x77,0x07, 0x0e,0xe0, 0xaa,0xaa, 0xaa,0xa0, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x0a,0xaa, 0x00,0x00, 0x0e,0x0a, 0xaa,0xaa, 0xa0,0xa0, 0x99,0x99, 0x90,0x0a, 0xaa,0xaa, 0xa0,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x04,0x40, 0x99,0x99, 0x0e,0xee, 0x04,0x44, 0x44,0x44, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xaa,0xa0, 0x77,0x0e, 0xee,0xee, 0xe0,0xaa, 0xaa,0x07, 0x77,0x70, 0xee,0xee, 0x0a,0xaa, 0xaa,0x07, 0x77,0x07, 0x0e,0xee, 0x0a,0xaa, 0xaa,0x07, 0x77,0x07, 0x0e,0xe0, 0xaa,0xaa, 0xaa,0xa0, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x0a,0xaa, 0x00,0x00, 0x0e,0x0a, 0xaa,0xaa, 0xa0,0xa0, 0x99,0x99, 0x90,0x0a, 0xaa,0xaa, 0xa0,0x09, 0x00,0x00, 0x00,0x0a, 0xaa,0xa0, 0x04,0x40, 0x99,0x99, 0x0e,0x0a, 0xaa,0x00, 0x44,0x44, 0x00,0x00, 0xee,0xe0, 0x00,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xaa,0xa0, 0x77,0x0e, 0xee,0xee, 0xe0,0xaa, 0xaa,0x07, 0x77,0x70, 0xee,0xee, 0x0a,0xaa, 0xaa,0x07, 0x77,0x07, 0x0e,0xee, 0x0a,0xaa, 0xaa,0x07, 0x77,0x07, 0x0e,0xe0, 0xaa,0xaa, 0xaa,0xa0, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x0a,0xaa, 0x00,0x00, 0x0e,0x0a, 0xaa,0xaa, 0xa0,0xa0, 0x99,0x99, 0x90,0x0a, 0xaa,0xaa, 0xa0,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x04,0x40, 0x99,0x99, 0x0e,0xee, 0x04,0x44, 0x44,0x44, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee};
Image img_bird_yellow_R = Image(img_bird_yellow_RData);

const uint8_t img_bird_yellow_LData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0a,0xaa, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xaa, 0xaa,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xaa, 0xaa,0xa0, 0xee,0xe0, 0x70,0x77, 0x70,0xaa, 0xa0,0x00, 0x0e,0xe0, 0x77,0x77, 0x0a,0xaa, 0x0a,0xaa, 0xa0,0xe0, 0x00,0x00, 0xaa,0xa0, 0xaa,0xaa, 0xa0,0x09, 0x99,0x99, 0x0a,0x0a, 0xaa,0xaa, 0xa0,0x00, 0x00,0x00, 0x90,0x0a, 0xaa,0xaa, 0xa0,0xe0, 0x99,0x99, 0x04,0x40, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x44,0x44, 0x44,0x40, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0a,0xaa, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xaa, 0xaa,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xaa, 0xaa,0xa0, 0xee,0xe0, 0x70,0x77, 0x70,0xaa, 0xaa,0xa0, 0xee,0xe0, 0x77,0x77, 0x0a,0xaa, 0xaa,0xaa, 0x0e,0xe0, 0x00,0x00, 0xaa,0xa0, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x0a,0x0a, 0xaa,0xaa, 0xa0,0x00, 0x00,0x00, 0x90,0x0a, 0xaa,0xaa, 0xa0,0xe0, 0x99,0x99, 0x04,0x40, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x44,0x44, 0x44,0x40, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0a,0xaa, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xaa, 0xaa,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xaa, 0xaa,0xa0, 0xee,0xe0, 0x70,0x77, 0x70,0xaa, 0xaa,0xa0, 0xee,0xe0, 0x77,0x77, 0x0a,0xaa, 0xaa,0xaa, 0x0e,0xe0, 0x00,0x00, 0xaa,0xa0, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x0a,0x0a, 0xaa,0xaa, 0xa0,0x00, 0x00,0x00, 0x90,0x0a, 0xaa,0xaa, 0xa0,0xe0, 0x99,0x99, 0x04,0x40, 0x0a,0xaa, 0xa0,0xee, 0x00,0x00, 0x44,0x44, 0x00,0xaa, 0xa0,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x00, 0x0e,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0a,0xaa, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xaa, 0xaa,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xaa, 0xaa,0xa0, 0xee,0xe0, 0x70,0x77, 0x70,0xaa, 0xaa,0xa0, 0xee,0xe0, 0x77,0x77, 0x0a,0xaa, 0xaa,0xaa, 0x0e,0xe0, 0x00,0x00, 0xaa,0xa0, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x0a,0x0a, 0xaa,0xaa, 0xa0,0x00, 0x00,0x00, 0x90,0x0a, 0xaa,0xaa, 0xa0,0xe0, 0x99,0x99, 0x04,0x40, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x44,0x44, 0x44,0x40, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee};
Image img_bird_yellow_L = Image(img_bird_yellow_LData);

const uint8_t img_bird_white_RData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x77,0x70, 0x77,0x0e, 0xee,0xee, 0xe0,0x77, 0x77,0x07, 0x77,0x70, 0xee,0xee, 0x07,0x77, 0x77,0x07, 0x77,0x07, 0x0e,0xe0, 0x00,0x07, 0x77,0x07, 0x77,0x07, 0x0e,0x07, 0x77,0x70, 0x76,0x60, 0x77,0x77, 0x0e,0x07, 0x77,0x77, 0x06,0x66, 0x00,0x00, 0x0e,0x07, 0x77,0x77, 0x60,0x60, 0x99,0x99, 0x90,0x06, 0x66,0x66, 0x60,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x06,0x60, 0x99,0x99, 0x0e,0xee, 0x06,0x66, 0x66,0x66, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x77,0x70, 0x77,0x0e, 0xee,0xee, 0xe0,0x77, 0x77,0x07, 0x77,0x70, 0xee,0xee, 0x07,0x77, 0x77,0x07, 0x77,0x07, 0x0e,0xee, 0x07,0x77, 0x77,0x07, 0x77,0x07, 0x0e,0xe0, 0x77,0x77, 0x76,0x60, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x06,0x66, 0x00,0x00, 0x0e,0x07, 0x77,0x77, 0x70,0x60, 0x99,0x99, 0x90,0x06, 0x66,0x66, 0x60,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x06,0x60, 0x99,0x99, 0x0e,0xee, 0x06,0x66, 0x66,0x66, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x77,0x70, 0x77,0x0e, 0xee,0xee, 0xe0,0x77, 0x77,0x07, 0x77,0x70, 0xee,0xee, 0x07,0x77, 0x77,0x07, 0x77,0x07, 0x0e,0xee, 0x07,0x77, 0x77,0x07, 0x77,0x07, 0x0e,0xe0, 0x77,0x77, 0x76,0x60, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x06,0x66, 0x00,0x00, 0x0e,0x07, 0x77,0x77, 0x70,0x60, 0x99,0x99, 0x90,0x07, 0x77,0x77, 0x70,0x09, 0x00,0x00, 0x00,0x07, 0x77,0x60, 0x06,0x60, 0x99,0x99, 0x0e,0x06, 0x66,0x00, 0x66,0x66, 0x00,0x00, 0xee,0xe0, 0x00,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x77,0x70, 0x77,0x0e, 0xee,0xee, 0xe0,0x77, 0x77,0x07, 0x77,0x70, 0xee,0xee, 0x07,0x77, 0x77,0x07, 0x77,0x07, 0x0e,0xee, 0x07,0x77, 0x77,0x07, 0x77,0x07, 0x0e,0xe0, 0x77,0x77, 0x76,0x60, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x06,0x66, 0x00,0x00, 0x0e,0x07, 0x77,0x77, 0x70,0x60, 0x99,0x99, 0x90,0x06, 0x66,0x66, 0x60,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x06,0x60, 0x99,0x99, 0x0e,0xee, 0x06,0x66, 0x66,0x66, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee};
Image img_bird_white_R = Image(img_bird_white_RData);

const uint8_t img_bird_white_LData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x07,0x77, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x77, 0x77,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x77, 0x77,0x70, 0xee,0xe0, 0x70,0x77, 0x70,0x77, 0x70,0x00, 0x0e,0xe0, 0x77,0x77, 0x06,0x67, 0x07,0x77, 0x70,0xe0, 0x00,0x00, 0x66,0x60, 0x77,0x77, 0x70,0x09, 0x99,0x99, 0x06,0x06, 0x77,0x77, 0x70,0x00, 0x00,0x00, 0x90,0x06, 0x66,0x66, 0x60,0xe0, 0x99,0x99, 0x06,0x60, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x66,0x66, 0x66,0x60, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x07,0x77, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x77, 0x77,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x77, 0x77,0x70, 0xee,0xe0, 0x70,0x77, 0x70,0x77, 0x77,0x70, 0xee,0xe0, 0x77,0x77, 0x06,0x67, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x66,0x60, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x06,0x07, 0x77,0x77, 0x70,0x00, 0x00,0x00, 0x90,0x06, 0x66,0x66, 0x60,0xe0, 0x99,0x99, 0x06,0x60, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x66,0x66, 0x66,0x60, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x07,0x77, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x77, 0x77,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x77, 0x77,0x70, 0xee,0xe0, 0x70,0x77, 0x70,0x77, 0x77,0x70, 0xee,0xe0, 0x77,0x77, 0x06,0x67, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x66,0x60, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x06,0x07, 0x77,0x77, 0x70,0x00, 0x00,0x00, 0x90,0x07, 0x77,0x77, 0x70,0xe0, 0x99,0x99, 0x06,0x60, 0x06,0x77, 0x70,0xee, 0x00,0x00, 0x66,0x66, 0x00,0x66, 0x60,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x00, 0x0e,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x07,0x77, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x77, 0x77,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x77, 0x77,0x70, 0xee,0xe0, 0x70,0x77, 0x70,0x77, 0x77,0x70, 0xee,0xe0, 0x77,0x77, 0x06,0x67, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x66,0x60, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x06,0x07, 0x77,0x77, 0x70,0x00, 0x00,0x00, 0x90,0x06, 0x66,0x66, 0x60,0xe0, 0x99,0x99, 0x06,0x60, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x66,0x66, 0x66,0x60, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee};
Image img_bird_white_L = Image(img_bird_white_LData);

const uint8_t img_bird_red_RData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x88,0x80, 0x77,0x0e, 0xee,0xee, 0xe0,0x88, 0x88,0x07, 0x77,0x70, 0xee,0xee, 0x08,0x88, 0x88,0x07, 0x77,0x07, 0x0e,0xe0, 0x00,0x08, 0x88,0x07, 0x77,0x07, 0x0e,0x08, 0x88,0x80, 0x82,0x20, 0x77,0x77, 0x0e,0x08, 0x88,0x88, 0x02,0x22, 0x00,0x00, 0x0e,0x08, 0x88,0x88, 0x20,0x20, 0x99,0x99, 0x90,0x02, 0x22,0x22, 0x20,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x07,0x70, 0x99,0x99, 0x0e,0xee, 0x07,0x77, 0x77,0x77, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x88,0x80, 0x77,0x0e, 0xee,0xee, 0xe0,0x88, 0x88,0x07, 0x77,0x70, 0xee,0xee, 0x08,0x88, 0x88,0x07, 0x77,0x07, 0x0e,0xee, 0x08,0x88, 0x88,0x07, 0x77,0x07, 0x0e,0xe0, 0x88,0x88, 0x82,0x20, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x02,0x22, 0x00,0x00, 0x0e,0x08, 0x88,0x88, 0x80,0x20, 0x99,0x99, 0x90,0x02, 0x22,0x22, 0x20,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x07,0x70, 0x99,0x99, 0x0e,0xee, 0x07,0x77, 0x77,0x77, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x88,0x80, 0x77,0x0e, 0xee,0xee, 0xe0,0x88, 0x88,0x07, 0x77,0x70, 0xee,0xee, 0x08,0x88, 0x88,0x07, 0x77,0x07, 0x0e,0xee, 0x08,0x88, 0x88,0x07, 0x77,0x07, 0x0e,0xe0, 0x88,0x88, 0x82,0x20, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x02,0x22, 0x00,0x00, 0x0e,0x08, 0x88,0x88, 0x80,0x20, 0x99,0x99, 0x90,0x08, 0x88,0x88, 0x80,0x09, 0x00,0x00, 0x00,0x08, 0x88,0x20, 0x07,0x70, 0x99,0x99, 0x0e,0x02, 0x22,0x00, 0x77,0x77, 0x00,0x00, 0xee,0xe0, 0x00,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x88,0x80, 0x77,0x0e, 0xee,0xee, 0xe0,0x88, 0x88,0x07, 0x77,0x70, 0xee,0xee, 0x08,0x88, 0x88,0x07, 0x77,0x07, 0x0e,0xee, 0x08,0x88, 0x88,0x07, 0x77,0x07, 0x0e,0xe0, 0x88,0x88, 0x82,0x20, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x02,0x22, 0x00,0x00, 0x0e,0x08, 0x88,0x88, 0x80,0x20, 0x99,0x99, 0x90,0x02, 0x22,0x22, 0x20,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x07,0x70, 0x99,0x99, 0x0e,0xee, 0x07,0x77, 0x77,0x77, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee};
Image img_bird_red_R = Image(img_bird_red_RData);

const uint8_t img_bird_red_LData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x08,0x88, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x88, 0x88,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x88, 0x88,0x80, 0xee,0xe0, 0x70,0x77, 0x70,0x88, 0x80,0x00, 0x0e,0xe0, 0x77,0x77, 0x02,0x28, 0x08,0x88, 0x80,0xe0, 0x00,0x00, 0x22,0x20, 0x88,0x88, 0x80,0x09, 0x99,0x99, 0x02,0x02, 0x88,0x88, 0x80,0x00, 0x00,0x00, 0x90,0x02, 0x22,0x22, 0x20,0xe0, 0x99,0x99, 0x07,0x70, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x77,0x77, 0x77,0x70, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x08,0x88, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x88, 0x88,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x88, 0x88,0x80, 0xee,0xe0, 0x70,0x77, 0x70,0x88, 0x88,0x80, 0xee,0xe0, 0x77,0x77, 0x02,0x28, 0x88,0x88, 0x0e,0xe0, 0x00,0x00, 0x22,0x20, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x02,0x08, 0x88,0x88, 0x80,0x00, 0x00,0x00, 0x90,0x02, 0x22,0x22, 0x20,0xe0, 0x99,0x99, 0x07,0x70, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x77,0x77, 0x77,0x70, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x08,0x88, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x88, 0x88,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x88, 0x88,0x80, 0xee,0xe0, 0x70,0x77, 0x70,0x88, 0x88,0x80, 0xee,0xe0, 0x77,0x77, 0x02,0x28, 0x88,0x88, 0x0e,0xe0, 0x00,0x00, 0x22,0x20, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x02,0x08, 0x88,0x88, 0x80,0x00, 0x00,0x00, 0x90,0x08, 0x88,0x88, 0x80,0xe0, 0x99,0x99, 0x07,0x70, 0x02,0x88, 0x80,0xee, 0x00,0x00, 0x77,0x77, 0x00,0x22, 0x20,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x00, 0x0e,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x08,0x88, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x88, 0x88,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x88, 0x88,0x80, 0xee,0xe0, 0x70,0x77, 0x70,0x88, 0x88,0x80, 0xee,0xe0, 0x77,0x77, 0x02,0x28, 0x88,0x88, 0x0e,0xe0, 0x00,0x00, 0x22,0x20, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x02,0x08, 0x88,0x88, 0x80,0x00, 0x00,0x00, 0x90,0x02, 0x22,0x22, 0x20,0xe0, 0x99,0x99, 0x07,0x70, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x77,0x77, 0x77,0x70, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee};
Image img_bird_red_L = Image(img_bird_red_LData);

const uint8_t img_bird_green_RData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xbb,0xb0, 0x77,0x0e, 0xee,0xee, 0xe0,0xbb, 0xbb,0x07, 0x77,0x70, 0xee,0xee, 0x0b,0xbb, 0xbb,0x07, 0x77,0x07, 0x0e,0xe0, 0x00,0x0b, 0xbb,0x07, 0x77,0x07, 0x0e,0x0b, 0xbb,0xb0, 0xb3,0x30, 0x77,0x77, 0x0e,0x0b, 0xbb,0xbb, 0x03,0x33, 0x00,0x00, 0x0e,0x0b, 0xbb,0xbb, 0x30,0x30, 0x99,0x99, 0x90,0x03, 0x33,0x33, 0x30,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x08,0x80, 0x99,0x99, 0x0e,0xee, 0x08,0x88, 0x88,0x88, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xbb,0xb0, 0x77,0x0e, 0xee,0xee, 0xe0,0xbb, 0xbb,0x07, 0x77,0x70, 0xee,0xee, 0x0b,0xbb, 0xbb,0x07, 0x77,0x07, 0x0e,0xee, 0x0b,0xbb, 0xbb,0x07, 0x77,0x07, 0x0e,0xe0, 0xbb,0xbb, 0xb3,0x30, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x03,0x33, 0x00,0x00, 0x0e,0x0b, 0xbb,0xbb, 0xb0,0x30, 0x99,0x99, 0x90,0x03, 0x33,0x33, 0x30,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x08,0x80, 0x99,0x99, 0x0e,0xee, 0x08,0x88, 0x88,0x88, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xbb,0xb0, 0x77,0x0e, 0xee,0xee, 0xe0,0xbb, 0xbb,0x07, 0x77,0x70, 0xee,0xee, 0x0b,0xbb, 0xbb,0x07, 0x77,0x07, 0x0e,0xee, 0x0b,0xbb, 0xbb,0x07, 0x77,0x07, 0x0e,0xe0, 0xbb,0xbb, 0xb3,0x30, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x03,0x33, 0x00,0x00, 0x0e,0x0b, 0xbb,0xbb, 0xb0,0x30, 0x99,0x99, 0x90,0x0b, 0xbb,0xbb, 0xb0,0x09, 0x00,0x00, 0x00,0x0b, 0xbb,0x30, 0x08,0x80, 0x99,0x99, 0x0e,0x03, 0x33,0x00, 0x88,0x88, 0x00,0x00, 0xee,0xe0, 0x00,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xbb,0xb0, 0x77,0x0e, 0xee,0xee, 0xe0,0xbb, 0xbb,0x07, 0x77,0x70, 0xee,0xee, 0x0b,0xbb, 0xbb,0x07, 0x77,0x07, 0x0e,0xee, 0x0b,0xbb, 0xbb,0x07, 0x77,0x07, 0x0e,0xe0, 0xbb,0xbb, 0xb3,0x30, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x03,0x33, 0x00,0x00, 0x0e,0x0b, 0xbb,0xbb, 0xb0,0x30, 0x99,0x99, 0x90,0x03, 0x33,0x33, 0x30,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x08,0x80, 0x99,0x99, 0x0e,0xee, 0x08,0x88, 0x88,0x88, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee};
Image img_bird_green_R = Image(img_bird_green_RData);

const uint8_t img_bird_green_LData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0b,0xbb, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xbb, 0xbb,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xbb, 0xbb,0xb0, 0xee,0xe0, 0x70,0x77, 0x70,0xbb, 0xb0,0x00, 0x0e,0xe0, 0x77,0x77, 0x03,0x3b, 0x0b,0xbb, 0xb0,0xe0, 0x00,0x00, 0x33,0x30, 0xbb,0xbb, 0xb0,0x09, 0x99,0x99, 0x03,0x03, 0xbb,0xbb, 0xb0,0x00, 0x00,0x00, 0x90,0x03, 0x33,0x33, 0x30,0xe0, 0x99,0x99, 0x08,0x80, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x88,0x88, 0x88,0x80, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0b,0xbb, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xbb, 0xbb,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xbb, 0xbb,0xb0, 0xee,0xe0, 0x70,0x77, 0x70,0xbb, 0xbb,0xb0, 0xee,0xe0, 0x77,0x77, 0x03,0x3b, 0xbb,0xbb, 0x0e,0xe0, 0x00,0x00, 0x33,0x30, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x03,0x0b, 0xbb,0xbb, 0xb0,0x00, 0x00,0x00, 0x90,0x03, 0x33,0x33, 0x30,0xe0, 0x99,0x99, 0x08,0x80, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x88,0x88, 0x88,0x80, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0b,0xbb, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xbb, 0xbb,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xbb, 0xbb,0xb0, 0xee,0xe0, 0x70,0x77, 0x70,0xbb, 0xbb,0xb0, 0xee,0xe0, 0x77,0x77, 0x03,0x3b, 0xbb,0xbb, 0x0e,0xe0, 0x00,0x00, 0x33,0x30, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x03,0x0b, 0xbb,0xbb, 0xb0,0x00, 0x00,0x00, 0x90,0x0b, 0xbb,0xbb, 0xb0,0xe0, 0x99,0x99, 0x08,0x80, 0x03,0xbb, 0xb0,0xee, 0x00,0x00, 0x88,0x88, 0x00,0x33, 0x30,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x00, 0x0e,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0b,0xbb, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xbb, 0xbb,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xbb, 0xbb,0xb0, 0xee,0xe0, 0x70,0x77, 0x70,0xbb, 0xbb,0xb0, 0xee,0xe0, 0x77,0x77, 0x03,0x3b, 0xbb,0xbb, 0x0e,0xe0, 0x00,0x00, 0x33,0x30, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x03,0x0b, 0xbb,0xbb, 0xb0,0x00, 0x00,0x00, 0x90,0x03, 0x33,0x33, 0x30,0xe0, 0x99,0x99, 0x08,0x80, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x88,0x88, 0x88,0x80, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee};
Image img_bird_green_L = Image(img_bird_green_LData);

const uint8_t img_bird_blue_RData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xdd,0xd0, 0x77,0x0e, 0xee,0xee, 0xe0,0xdd, 0xdd,0x07, 0x77,0x70, 0xee,0xee, 0x0d,0xdd, 0xdd,0x07, 0x77,0x07, 0x0e,0xe0, 0x00,0x0d, 0xdd,0x07, 0x77,0x07, 0x0e,0x0d, 0xdd,0xd0, 0xd1,0x10, 0x77,0x77, 0x0e,0x0d, 0xdd,0xdd, 0x01,0x11, 0x00,0x00, 0x0e,0x0d, 0xdd,0xdd, 0x10,0x10, 0x99,0x99, 0x90,0x01, 0x11,0x11, 0x10,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x07,0x70, 0x99,0x99, 0x0e,0xee, 0x07,0x77, 0x77,0x77, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xdd,0xd0, 0x77,0x0e, 0xee,0xee, 0xe0,0xdd, 0xdd,0x07, 0x77,0x70, 0xee,0xee, 0x0d,0xdd, 0xdd,0x07, 0x77,0x07, 0x0e,0xee, 0x0d,0xdd, 0xdd,0x07, 0x77,0x07, 0x0e,0xe0, 0xdd,0xdd, 0xd1,0x10, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x01,0x11, 0x00,0x00, 0x0e,0x0d, 0xdd,0xdd, 0xd0,0x10, 0x99,0x99, 0x90,0x01, 0x11,0x11, 0x10,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x07,0x70, 0x99,0x99, 0x0e,0xee, 0x07,0x77, 0x77,0x77, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xdd,0xd0, 0x77,0x0e, 0xee,0xee, 0xe0,0xdd, 0xdd,0x07, 0x77,0x70, 0xee,0xee, 0x0d,0xdd, 0xdd,0x07, 0x77,0x07, 0x0e,0xee, 0x0d,0xdd, 0xdd,0x07, 0x77,0x07, 0x0e,0xe0, 0xdd,0xdd, 0xd1,0x10, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x01,0x11, 0x00,0x00, 0x0e,0x0d, 0xdd,0xdd, 0xd0,0x10, 0x99,0x99, 0x90,0x0d, 0xdd,0xdd, 0xd0,0x09, 0x00,0x00, 0x00,0x0d, 0xdd,0x10, 0x07,0x70, 0x99,0x99, 0x0e,0x01, 0x11,0x00, 0x77,0x77, 0x00,0x00, 0xee,0xe0, 0x00,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0xdd,0xd0, 0x77,0x0e, 0xee,0xee, 0xe0,0xdd, 0xdd,0x07, 0x77,0x70, 0xee,0xee, 0x0d,0xdd, 0xdd,0x07, 0x77,0x07, 0x0e,0xee, 0x0d,0xdd, 0xdd,0x07, 0x77,0x07, 0x0e,0xe0, 0xdd,0xdd, 0xd1,0x10, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x01,0x11, 0x00,0x00, 0x0e,0x0d, 0xdd,0xdd, 0xd0,0x10, 0x99,0x99, 0x90,0x01, 0x11,0x11, 0x10,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x07,0x70, 0x99,0x99, 0x0e,0xee, 0x07,0x77, 0x77,0x77, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee};
Image img_bird_blue_R = Image(img_bird_blue_RData);

const uint8_t img_bird_blue_LData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0d,0xdd, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xdd, 0xdd,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xdd, 0xdd,0xd0, 0xee,0xe0, 0x70,0x77, 0x70,0xdd, 0xd0,0x00, 0x0e,0xe0, 0x77,0x77, 0x01,0x1d, 0x0d,0xdd, 0xd0,0xe0, 0x00,0x00, 0x11,0x10, 0xdd,0xdd, 0xd0,0x09, 0x99,0x99, 0x01,0x01, 0xdd,0xdd, 0xd0,0x00, 0x00,0x00, 0x90,0x01, 0x11,0x11, 0x10,0xe0, 0x99,0x99, 0x07,0x70, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x77,0x77, 0x77,0x70, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0d,0xdd, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xdd, 0xdd,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xdd, 0xdd,0xd0, 0xee,0xe0, 0x70,0x77, 0x70,0xdd, 0xdd,0xd0, 0xee,0xe0, 0x77,0x77, 0x01,0x1d, 0xdd,0xdd, 0x0e,0xe0, 0x00,0x00, 0x11,0x10, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x01,0x0d, 0xdd,0xdd, 0xd0,0x00, 0x00,0x00, 0x90,0x01, 0x11,0x11, 0x10,0xe0, 0x99,0x99, 0x07,0x70, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x77,0x77, 0x77,0x70, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0d,0xdd, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xdd, 0xdd,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xdd, 0xdd,0xd0, 0xee,0xe0, 0x70,0x77, 0x70,0xdd, 0xdd,0xd0, 0xee,0xe0, 0x77,0x77, 0x01,0x1d, 0xdd,0xdd, 0x0e,0xe0, 0x00,0x00, 0x11,0x10, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x01,0x0d, 0xdd,0xdd, 0xd0,0x00, 0x00,0x00, 0x90,0x0d, 0xdd,0xdd, 0xd0,0xe0, 0x99,0x99, 0x07,0x70, 0x01,0xdd, 0xd0,0xee, 0x00,0x00, 0x77,0x77, 0x00,0x11, 0x10,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x00, 0x0e,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x0d,0xdd, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0xdd, 0xdd,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0xdd, 0xdd,0xd0, 0xee,0xe0, 0x70,0x77, 0x70,0xdd, 0xdd,0xd0, 0xee,0xe0, 0x77,0x77, 0x01,0x1d, 0xdd,0xdd, 0x0e,0xe0, 0x00,0x00, 0x11,0x10, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x01,0x0d, 0xdd,0xdd, 0xd0,0x00, 0x00,0x00, 0x90,0x01, 0x11,0x11, 0x10,0xe0, 0x99,0x99, 0x07,0x70, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x77,0x77, 0x77,0x70, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee};
Image img_bird_blue_L = Image(img_bird_blue_LData);

const uint8_t img_bird_black_RData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x66,0x60, 0x77,0x0e, 0xee,0xee, 0xe0,0x66, 0x66,0x07, 0x77,0x70, 0xee,0xee, 0x06,0x66, 0x66,0x07, 0x77,0x07, 0x0e,0xe0, 0x00,0x06, 0x66,0x07, 0x77,0x07, 0x0e,0x06, 0x66,0x60, 0x65,0x50, 0x77,0x77, 0x0e,0x06, 0x66,0x66, 0x05,0x55, 0x00,0x00, 0x0e,0x06, 0x66,0x66, 0x50,0x50, 0x99,0x99, 0x90,0x05, 0x55,0x55, 0x50,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x05,0x50, 0x99,0x99, 0x0e,0xee, 0x05,0x55, 0x55,0x55, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x66,0x60, 0x77,0x0e, 0xee,0xee, 0xe0,0x66, 0x66,0x07, 0x77,0x70, 0xee,0xee, 0x06,0x66, 0x66,0x07, 0x77,0x07, 0x0e,0xee, 0x06,0x66, 0x66,0x07, 0x77,0x07, 0x0e,0xe0, 0x66,0x66, 0x65,0x50, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x05,0x55, 0x00,0x00, 0x0e,0x06, 0x66,0x66, 0x60,0x50, 0x99,0x99, 0x90,0x05, 0x55,0x55, 0x50,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x05,0x50, 0x99,0x99, 0x0e,0xee, 0x05,0x55, 0x55,0x55, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x66,0x60, 0x77,0x0e, 0xee,0xee, 0xe0,0x66, 0x66,0x07, 0x77,0x70, 0xee,0xee, 0x06,0x66, 0x66,0x07, 0x77,0x07, 0x0e,0xee, 0x06,0x66, 0x66,0x07, 0x77,0x07, 0x0e,0xe0, 0x66,0x66, 0x65,0x50, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x05,0x55, 0x00,0x00, 0x0e,0x06, 0x66,0x66, 0x60,0x50, 0x99,0x99, 0x90,0x06, 0x66,0x66, 0x60,0x09, 0x00,0x00, 0x00,0x06, 0x66,0x50, 0x05,0x50, 0x99,0x99, 0x0e,0x05, 0x55,0x00, 0x55,0x55, 0x00,0x00, 0xee,0xe0, 0x00,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0x00, 0x66,0x60, 0x77,0x0e, 0xee,0xee, 0xe0,0x66, 0x66,0x07, 0x77,0x70, 0xee,0xee, 0x06,0x66, 0x66,0x07, 0x77,0x07, 0x0e,0xee, 0x06,0x66, 0x66,0x07, 0x77,0x07, 0x0e,0xe0, 0x66,0x66, 0x65,0x50, 0x77,0x77, 0x0e,0xe0, 0x00,0x00, 0x05,0x55, 0x00,0x00, 0x0e,0x06, 0x66,0x66, 0x60,0x50, 0x99,0x99, 0x90,0x05, 0x55,0x55, 0x50,0x09, 0x00,0x00, 0x00,0xe0, 0x00,0x00, 0x05,0x50, 0x99,0x99, 0x0e,0xee, 0x05,0x55, 0x55,0x55, 0x00,0x00, 0xee,0xee, 0xe0,0x00, 0x00,0x00, 0xee,0xee, 0xee};
Image img_bird_black_R = Image(img_bird_black_RData);

const uint8_t img_bird_black_LData[] = {16, 12, 4, 0, 1, 14, 1, 0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x06,0x66, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x66, 0x66,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x66, 0x66,0x60, 0xee,0xe0, 0x70,0x77, 0x70,0x66, 0x60,0x00, 0x0e,0xe0, 0x77,0x77, 0x05,0x56, 0x06,0x66, 0x60,0xe0, 0x00,0x00, 0x55,0x50, 0x66,0x66, 0x60,0x09, 0x99,0x99, 0x05,0x05, 0x66,0x66, 0x60,0x00, 0x00,0x00, 0x90,0x05, 0x55,0x55, 0x50,0xe0, 0x99,0x99, 0x05,0x50, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x55,0x55, 0x55,0x50, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x06,0x66, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x66, 0x66,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x66, 0x66,0x60, 0xee,0xe0, 0x70,0x77, 0x70,0x66, 0x66,0x60, 0xee,0xe0, 0x77,0x77, 0x05,0x56, 0x66,0x66, 0x0e,0xe0, 0x00,0x00, 0x55,0x50, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x05,0x06, 0x66,0x66, 0x60,0x00, 0x00,0x00, 0x90,0x05, 0x55,0x55, 0x50,0xe0, 0x99,0x99, 0x05,0x50, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x55,0x55, 0x55,0x50, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x06,0x66, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x66, 0x66,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x66, 0x66,0x60, 0xee,0xe0, 0x70,0x77, 0x70,0x66, 0x66,0x60, 0xee,0xe0, 0x77,0x77, 0x05,0x56, 0x66,0x66, 0x0e,0xe0, 0x00,0x00, 0x55,0x50, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x05,0x06, 0x66,0x66, 0x60,0x00, 0x00,0x00, 0x90,0x06, 0x66,0x66, 0x60,0xe0, 0x99,0x99, 0x05,0x50, 0x05,0x66, 0x60,0xee, 0x00,0x00, 0x55,0x55, 0x00,0x55, 0x50,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x00, 0x0e,0xee, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xe0,0x77, 0x06,0x66, 0x00,0xee, 0xee,0xee, 0x07,0x77, 0x70,0x66, 0x66,0x0e, 0xee,0xe0, 0x70,0x77, 0x70,0x66, 0x66,0x60, 0xee,0xe0, 0x70,0x77, 0x70,0x66, 0x66,0x60, 0xee,0xe0, 0x77,0x77, 0x05,0x56, 0x66,0x66, 0x0e,0xe0, 0x00,0x00, 0x55,0x50, 0x00,0x00, 0x0e,0x09, 0x99,0x99, 0x05,0x06, 0x66,0x66, 0x60,0x00, 0x00,0x00, 0x90,0x05, 0x55,0x55, 0x50,0xe0, 0x99,0x99, 0x05,0x50, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0x55,0x55, 0x55,0x50, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x0e, 0xee};
Image img_bird_black_L = Image(img_bird_black_LData);

#define MENU_LENGTH 5
const char strNormal[] = " Piece of Cake";
const char strHard[] = " Damn I'm Good";
const char strHighScore[] = " HighScores";
const char strTraining[] = " Sweety Kitten mode";
const char strBenchmark[] = " P0weRZ Us3rZ";
const char* startMenu[MENU_LENGTH] = {
  strNormal,
  strHard,
  strHighScore,
  strTraining,
  strBenchmark
};

const SaveDefault savefileDefaults[] = {
  { 0, SAVETYPE_INT, 9999, 0 },
  { 1, SAVETYPE_BLOB, NAMELENGTH+1, 0 },
  { 2, SAVETYPE_INT, 9999, 0 },
  { 3, SAVETYPE_BLOB, NAMELENGTH+1, 0 },
  { 4, SAVETYPE_INT, 9999, 0 },
  { 5, SAVETYPE_BLOB, NAMELENGTH+1, 0 },
  { 6, SAVETYPE_INT, 9999, 0 },
  { 7, SAVETYPE_BLOB, NAMELENGTH+1, 0 },
  { 8, SAVETYPE_INT, 9999, 0 },
  { 9, SAVETYPE_BLOB, NAMELENGTH+1, 0 },
};

//////////////
void setup() {
  gb.begin();
  gb.save.config(savefileDefaults);
  initHighscore();
}

//////////////
void loop() {
  while (!gb.update());
  gb.display.clear();
  gb.display.fill(DARKGRAY);

  if (game_running) {
  drawPads();
  updateBall();
  drawBall();
  drawInterface();
  shiftLevel();
  } else {
  drawMenu();
  }
  
}

void beginGame() {
  game_running = true;
  boolean high_score = false;
  bird_color = colors[random(0,NUM_COLORS)];
  switch(difficulty) {
    case NORMAL:
      NUM_PADS = 6;// nb of pads - 3 on each side
      base_h = 19; //h of pads in pixels
      break;
    case HARD: 
      NUM_PADS = 8;// nb of pads - 4 on each side
      base_h = 14; //h of pads in pixels
      break;
  }
  ball.point.y = (gb.display.height()-y_min-ball.r) /2;
  ball.point.x = gb.display.width() /2;
  ball.spd.dx = 1;
  ball.spd.dy = 1;
  dx_max = 8;
  ball.r = 4;
  current_score = 0;
  currentTime = 0;
  limitTime = 235;
  nColors = 3;
  y_min = gb.display.height()-(gb.display.height()-(base_h*(NUM_PADS/2)));
  //initialize coords of pads :
  for (byte i = 0; i<NUM_PADS; i++) {
    if (i < NUM_PADS/2 ) {
        Xpads[i] = 0;
        Ypads[i] = i * base_h;
        }
    if (i >= NUM_PADS/2 ) {
        Xpads[i] = gb.display.width()-base_w;
        Ypads[i] = (i-NUM_PADS/2) * base_h;
        }
  }
}

void endGame() {
  game_running = false;
  saveHighscore(current_score);
  gb.gui.popup("HA HA You lose !", 150);
}

void updateBall() {
  currentTime ++;
  ball.spd.dy *= 0.95;
  ball.spd.dy += 0.3;
  if(gb.buttons.timeHeld(BUTTON_A) > 0 & gb.buttons.timeHeld(BUTTON_A) < 5 ){ //higher jump by holding A down
    ball.spd.dy -= 1.5; //boing !
  }
  if (gb.buttons.repeat(BUTTON_B, 2)) {
    if(ball.spd.dx < 0) {ball.spd.dx -= 1;} //chpakk !
    if(ball.spd.dx > 0) {ball.spd.dx += 1;}
  }
  ball.point.y += ball.spd.dy;          //vertical rebound
  if (ball.point.y >= y_min-ball.r) {          //ball want to go out of screen
    ball.point.y = y_min-ball.r;
    ball.spd.dy *= -1;
  }
  if (ball.point.y <= 0) {              //ball want to go out of screen
    ball.point.y = 0;
    ball.spd.dy *= -1;
  }
  ball.point.x += ball.spd.dx;        //horizontal rebound
  ball.spd.dx = min (ball.spd.dx, dx_max); //dx max 
  if (ball.spd.dx > 4) {ball.spd.dx *= 0.96;} //friction at high speed
  if (ball.point.x >= gb.display.width()) {          //ball want to right go out of screen
    ball.point.x = gb.display.width()-ball.r;
    ball.spd.dx *= -1;
    if (checkColor(RIGHT, ball.point.y) == dtc) {
      current_score = current_score + bonusScore() ;
      regenPads(nColors);
      currentTime = 0;;
    }
  }
  if (ball.point.x <= 0) {              //ball want to left go out of screen
    ball.point.x = 0+ball.r;
    ball.spd.dx *= -1;
    if (checkColor(LEFT, ball.point.y) == dtc) {
      current_score = current_score + bonusScore() ;
      regenPads(nColors);
      currentTime = 0;;
    }
  }
  if (currentTime > limitTime) {
    currentTime = 0;
    endGame();
   }
}

void regenPads(byte n){     //n for the number of color is used and set a random ball color
  for (byte i=0; i<NUM_PADS; i++) {
  pads[i] = colors[random(0,min(n,NUM_COLORS))];
  }
  if(ball.spd.dx < 0) { dtc = pads[random(0,NUM_PADS/2)];} //Ball goes left
  if(ball.spd.dx > 0) { dtc = pads[random(NUM_PADS/2, NUM_PADS)];} //Ball goes right
}

void shiftLevel() {
  nColors = 3;    //change nb of colors
  if (current_score > 250) {
    limitTime = 175; //decrease time limit to 7s
    dx_max = 12;    //speed up !
    nColors = 4;
    }
  if (current_score > 500) {
    limitTime = 125;
    dx_max = 14;
    nColors = 5;
    }
  if (current_score > 1000) {
    limitTime = 75;
    dx_max = 15;
    nColors = NUM_COLORS;
   }    
}

int checkColor(byte side, byte y) {    //side = 1 for left, side = 0 for right
  switch (side) {
    case 1 :  //Left side
      return pads[y/base_h];
      break;
    case 0 :  //Right side
      return pads[(y/base_h)+(NUM_PADS/2)];
      break;
  }
}

int bonusScore() {    //score calcul
  if (!training) {
  return int( ((limitTime - currentTime)*fps) + ((y_min - ball.point.y)/2) + difficulty*5 ) ;
  }
  return 1; //if training, no bonus score
}

boolean collidePointRect(Point test_point, Rect test_rect){
  if ( (test_point.x < test_rect.x) || (test_point.x > (test_rect.x + test_rect.w - 1)) || (test_point.y < test_rect.y) || (test_point.y > (test_rect.y + test_rect.h -1)) ) {
    return false;
  } else {
    return true;
  }
}

void drawPads() {
  for (byte i=0; i<NUM_PADS; i++) {
    gb.display.setColor(pads[i]);
    gb.display.fillRect(Xpads[i],Ypads[i],base_w,base_h);
  }
}

void drawBall() {
  gb.display.setColor(GRAY);
  gb.display.setFontSize(6);
  gb.display.setCursor(gb.display.width()/2-8,10);
  realTime = int((limitTime - currentTime)*fps);
  gb.display.println(realTime);
  gb.display.setFontSize(1);
  //10 YELLOW   13 BLUE   8 RED   3 GREEN   7 WHITE   0 BLACK
    if (training) {
    switch (dtc) {
     case 10:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_yellow_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_yellow_L);}
        break;
     case 13:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_blue_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_blue_L);}
        break;
     case 8:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_red_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_red_L);}
        break;
     case 3:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_green_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_green_L);}
        break;
     case 7:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_white_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_white_L);}
        break; 
     case 0:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_black_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_black_L);}
        break; 
    }
  } else {
    switch (bird_color) {
     case 10:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_yellow_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_yellow_L);}
        break;
     case 13:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_blue_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_blue_L);}
        break;
     case 8:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_red_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_red_L);}
        break;
     case 3:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_green_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_green_L);}
        break;
     case 7:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_white_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_white_L);}
        break; 
     case 0:
        if (ball.spd.dx > 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_black_R);}
        if (ball.spd.dx < 0) {gb.display.drawImage(ball.point.x-8, ball.point.y-5,img_bird_black_L);}
        break; 
    }
  }

  if (benchmark) {
  gb.display.setColor(PINK);
  gb.display.drawCircle(ball.point.x, ball.point.y, ball.r);
  }
  
  gb.lights.setColor(dtc);
  if (dtc == 13) { gb.lights.setColor(DARKBLUE); } //because blue are too close to green on the leds
  gb.lights.fill();
}

void drawInterface() {
  gb.display.setColor(DARKGRAY);
  gb.display.fillRect(0,y_min,gb.display.width(),gb.display.height()-y_min);
  gb.display.setColor(GRAY);
  gb.display.drawFastHLine(0,y_min,gb.display.width());
  gb.display.drawFastHLine(0,0,gb.display.width());
  gb.display.drawFastVLine(0,0,gb.display.height());
  gb.display.drawFastVLine(gb.display.width()-1,0,gb.display.height());
  gb.display.setCursor(2,y_min+2);
  gb.display.print("Score : ");
  gb.display.println(current_score);

  
//BENCH
 if (benchmark) {
 gb.display.setColor(WHITE);
 gb.display.setCursor(1, 1);
 int load = gb.getCpuLoad();
 gb.display.print("CPU:");
 gb.display.print(load);
 gb.display.println("%");
 }
}

void drawMenu(){
  switch(gb.gui.menu("DTC !!", startMenu, MENU_LENGTH)){
      case 0: //NORMAL
        difficulty = NORMAL;
        beginGame();
        regenPads(nColors);
        break;
      case 1: //HARD
        difficulty = HARD;
        beginGame();
        regenPads(nColors);
        break;
      case 2: //HighScore
        drawHighScores();
        break;
      case 3: //TRAINING mode
        training = !training;
        if (training) {gb.gui.popup("Training Mode",75);}
        if (!training) {gb.gui.popup("Normal Mode",75);}
        break;
      case 4: //BENCHMARK
        benchmark = !benchmark;
        if (benchmark) {gb.gui.popup("Dumb Benchmark On",75);}
        if (!benchmark) {gb.gui.popup("Dumb Benchmark Off",75);}
        break;
     } 
}
